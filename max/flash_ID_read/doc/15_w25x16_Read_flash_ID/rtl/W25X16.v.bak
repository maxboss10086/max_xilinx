/****************************************Copyright (c)**************************************************
**                                      HengChuang Corp 
**                                     
**---------------------------------------File Info-----------------------------------------------------
** File name:           W25x16_ID
** Last modified Date:  2014-5-16
** Last Version:        1.0
** Descriptions:        W25x16_
**------------------------------------------------------------------------------------------------------
** Created by:          dongdong
** Created date:        2009-10-18
** Version:             1.0
** Descriptions:        The original version
**
**------------------------------------------------------------------------------------------------------
** Modified by:			
** Modified date:		
** Version:				
** Descriptions:		  modify hc595 driver segled to 8550
**
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
module W25X16 ( 
//input signal
input                sys_clk			,
input                sys_rst_n			,
input  					W25X16_DO		,	
//output 
output  reg				W25X16_CS		,
output  wire			W25X16_CLK		,
output  reg				W25X16_DIO		,

output  reg  [7:0]	LED	  
				);

//parameter define 

//reg define 
reg    [5:0]            counter                	;

reg    [5:0]            clk_cnt                	;

reg    [7:0]			shift_buf				;
wire					div_clk					;

//wire define 


/*******************************************************************************************************
**                              Main Program    
**  
********************************************************************************************************/
 
always @(posedge sys_clk or negedge sys_rst_n) begin 
   if (sys_rst_n ==1'b0)  
       clk_cnt <= 6'b0;
   else
       clk_cnt <= clk_cnt + 1'b1;  
end

assign div_clk = clk_cnt[5];



always @(posedge div_clk or negedge sys_rst_n) begin 
    if (sys_rst_n ==1'b0)  
        counter <= 6'b0;    
    else 
        counter <= counter + 6'b1;
end
			 
			 
always @(*)  begin
	if (counter >= 8 && counter <= 58)  
        W25X16_CS <= 1'b0; 
	else
		W25X16_CS <= 1'b1;
end
	 
always @(*)  begin
	if (counter >= 8 && counter <= 58)  
        W25X16_CLK <= div_clk; 
	else
		W25X16_CLK <= 1'b0;
end



always @(posedge div_clk or negedge sys_rst_n)  begin
	if (sys_rst_n ==1'b0)  
        counter <= 6'b0;    
    else 
		case (counter  )
		  8'd10:  W25X16_DIO <= 1'b1;
		  8'd11:  W25X16_DIO <= 1'b0;
		  8'd12:  W25X16_DIO <= 1'b0;
		  8'd13:  W25X16_DIO <= 1'b1;
		  8'd14:  W25X16_DIO <= 1'b0;
		  8'd15:  W25X16_DIO <= 1'b0;
		  8'd16:  W25X16_DIO <= 1'b0;
		  8'd17:  W25X16_DIO <= 1'b0;
		  
		  
		  8'd18:  W25X16_DIO <= 1'b0;
		  8'd19:  W25X16_DIO <= 1'b0;
		  8'd20:  W25X16_DIO <= 1'b0;
		  8'd21:  W25X16_DIO <= 1'b0;
		  8'd22:  W25X16_DIO <= 1'b0;
		  8'd23:  W25X16_DIO <= 1'b0;
		  8'd24:  W25X16_DIO <= 1'b0;
		  8'd25:  W25X16_DIO <= 1'b0;
		  
		  8'd26:  W25X16_DIO <= 1'b0;
		  8'd27:  W25X16_DIO <= 1'b0;
		  8'd28:  W25X16_DIO <= 1'b0;
		  8'd29:  W25X16_DIO <= 1'b0;
		  8'd30:  W25X16_DIO <= 1'b0;
		  8'd31:  W25X16_DIO <= 1'b0;
		  8'd32:  W25X16_DIO <= 1'b0;
		  8'd33:  W25X16_DIO <= 1'b0;
		  
		  8'd34:  W25X16_DIO <= 1'b0;
		  8'd35:  W25X16_DIO <= 1'b0;
		  8'd36:  W25X16_DIO <= 1'b0;
		  8'd37:  W25X16_DIO <= 1'b0;
		  8'd38:  W25X16_DIO <= 1'b0;
		  8'd39:  W25X16_DIO <= 1'b0;
		  8'd40:  W25X16_DIO <= 1'b0;
		  8'd41:  W25X16_DIO <= 1'b0;
		  
		  
		endcase
end

always @(*)  begin
		if  (counter ==  48 )
				shift_buf <= 8'b0;
		else if  ( counter >= 49 && counter <=  56  )
				shift_buf <= { shift_buf[7:1], W25X16_DO};		
	    else; 		
end



always @(posedge div_clk or negedge sys_rst_n )  begin
		if  (counter ==  57 )
				led <= shift_buf; 				
end

endmodule
//end of RTL code                       
